services:
  backend:
    build: 
      context: ./src/backend 
      dockerfile: Dockerfile
    ports:
      - 8080:8080
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      - ConnectionStrings__Postgres=Host=postgres;Port=5432;Database=database;Username=postgres;Password=password;Pooling=true;Timeout=30
      - ASPNETCORE_ENVIRONMENT=Development
      - ConnectionStrings__Redis=redis:6379,abortConnect=false

  postgres:
    image: postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_DB: database
    ports:
      - 5432:5432
    volumes:
      - postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d database"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s

  redis:
    image: redis:latest
    ports:
      - 6379:6379
    volumes:
      - redis-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  frontend-builder:
    build:
      context: ./src/frontend
      dockerfile: Dockerfile
    environment:
    - REACT_APP_API_URL=/api
    volumes:
      - ./src/frontend/build:/app/build
    restart: on-failure
    command: npm run build
      
      
      
  nginx:
      image: nginx:alpine
      volumes:
        - ./src/frontend/build:/usr/share/nginx/html
        - ./configurations/default.conf:/etc/nginx/conf.d/default.conf
        - ./configurations/nginx.conf:/etc/nginx/nginx.conf
      ports:
        - "3000:80"
      depends_on:
        - frontend-builder
        - backend
      


networks:
  default:
    name: test_network
    driver: bridge
volumes:
  postgres-data:
  redis-data: